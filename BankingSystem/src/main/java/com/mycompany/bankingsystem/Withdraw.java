/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.bankingsystem;

import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.font.TextAttribute;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;

/**
 *
 * @author MJ
 */
public class Withdraw extends javax.swing.JFrame {

    /**
     * Creates new form Deposit
     */
    public Withdraw() {
        initComponents();
        jdc_date.setDate(new Date());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        lbl_createaccount = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        lbl_name1 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        lbl_accountnumber1 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        lbl_amount = new javax.swing.JLabel();
        cmb_account = new javax.swing.JComboBox<>();
        jLabel28 = new javax.swing.JLabel();
        txt_withdraw = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jdc_date = new com.toedter.calendar.JDateChooser();
        jLabel23 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel3.setBackground(new java.awt.Color(255, 255, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Rút tiền", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 18), new java.awt.Color(0, 153, 0))); // NOI18N

        lbl_createaccount.setBackground(new java.awt.Color(204, 204, 204));
        lbl_createaccount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_createaccount.setIcon(new javax.swing.ImageIcon(getClass().getResource("/withdraw.png"))); // NOI18N
        lbl_createaccount.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 102, 102)));
        lbl_createaccount.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_createaccountMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lbl_createaccountMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lbl_createaccountMouseExited(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel3.setText("VNĐ");

        jLabel22.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel22.setText("Tên người sử dụng:");

        lbl_name1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbl_name1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        jLabel24.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel24.setText("Số tài khoản:");

        lbl_accountnumber1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbl_accountnumber1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        jLabel26.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel26.setText("Số dư tài khoản:");

        lbl_amount.setFont(new java.awt.Font("Segoe UI", 1, 22)); // NOI18N
        lbl_amount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        cmb_account.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tài khoản chính", "Tài khoản phụ" }));
        cmb_account.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cmb_accountPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        jLabel28.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel28.setText("Nhập khoản tiền muốn rút");

        txt_withdraw.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txt_withdraw.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_withdraw.setText("0");
        txt_withdraw.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_withdrawKeyTyped(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jButton1.setText("Rút tiền");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton2.setText("Thoát");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jdc_date.setDateFormatString("yyyy-MM-dd");

        jLabel23.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel23.setText("Ngày rút:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                        .addGap(117, 117, 117)
                        .addComponent(lbl_amount, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addGap(6, 6, 6))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel28, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                                .addComponent(txt_withdraw, javax.swing.GroupLayout.Alignment.LEADING))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel23, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmb_account, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jdc_date, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                                        .addComponent(lbl_name1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lbl_accountnumber1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addGap(144, 144, 144)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2)
                    .addComponent(lbl_createaccount, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jdc_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lbl_name1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lbl_accountnumber1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbl_amount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel26)
                                        .addComponent(cmb_account, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel28))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(lbl_createaccount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_withdraw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void lbl_createaccountMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_createaccountMouseClicked

    }//GEN-LAST:event_lbl_createaccountMouseClicked

    private void lbl_createaccountMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_createaccountMouseEntered

    }//GEN-LAST:event_lbl_createaccountMouseEntered

    private void lbl_createaccountMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_createaccountMouseExited

    }//GEN-LAST:event_lbl_createaccountMouseExited

    private void cmb_accountPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cmb_accountPopupMenuWillBecomeInvisible
        String account = cmb_account.getSelectedItem().toString();
        int account_number = Integer.parseInt(lbl_accountnumber1.getText());
        String sql = "SELECT * FROM open_account WHERE account_number='" + account_number + "'";
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            //Copy the url of database connection from connection properties
            String url = "jdbc:mysql://localhost:3306/bank?zeroDateTimeBehavior=CONVERT_TO_NULL";
            String sqlusername = "root";//username of MySQL Connection
            String sqlpassword = "";//password of MYSQL Connection
            //Register the Connection
            Connection conn = DriverManager.getConnection(url, sqlusername, sqlpassword);
            PreparedStatement pst = conn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {

                if (cmb_account.getSelectedItem().equals("Tài khoản chính")) {
                    int amount = rs.getInt("sa_balance");

                    // Sử dụng NumberFormat với Locale.VIETNAM
                    DecimalFormat decimal = new DecimalFormat("#,###");
                    lbl_amount.setText(decimal.format(amount));

                } else {
                    int amount = rs.getInt("ca_balance");

                    // Sử dụng NumberFormat với Locale.VIETNAM
                    DecimalFormat decimal = new DecimalFormat("#,###");
                    lbl_amount.setText(decimal.format(amount));
                }

            }

        } catch (ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_cmb_accountPopupMenuWillBecomeInvisible

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String da = ((JTextField) jdc_date.getDateEditor().getUiComponent()).getText();
        java.sql.Date date = java.sql.Date.valueOf(da);
        int account_number = Integer.parseInt(lbl_accountnumber1.getText());
        int amount = Integer.parseInt(txt_withdraw.getText());
        
//        amount = (int) Math.floor(amount / 1000.0) * 1000;
        
        if (amount < 1000) {
            JOptionPane.showMessageDialog(null, "Số tiền gửi ít nhất 1000đ");
            return;
        }

        if (cmb_account.getSelectedItem().equals("Tài khoản chính")) {
        boolean success = withdrawMoney("Tài khoản chính", account_number, amount, lbl_amount);
        if (success) {
            jdc_date.setDate(new Date());
            txt_withdraw.setText("0");
        }
        } else if (cmb_account.getSelectedItem().equals("Tài khoản phụ")) {
            boolean success = withdrawMoney("Tài khoản phụ", account_number, amount, lbl_amount);
            if (success) {
                jdc_date.setDate(new Date());
                txt_withdraw.setText("0");
        }
    }

    }//GEN-LAST:event_jButton1ActionPerformed
    private boolean withdrawMoney(String accountType, int accountNumber, int amount, JLabel lblAmount) {
    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        String url = "jdbc:mysql://localhost:3306/bank?zeroDateTimeBehavior=CONVERT_TO_NULL";
        String sqlUsername = "root";
        String sqlPassword = "";

        try (Connection conn = DriverManager.getConnection(url, sqlUsername, sqlPassword)) {
            String sqlQuery = "SELECT * FROM open_account WHERE account_number = ?";
            try (PreparedStatement pst = conn.prepareStatement(sqlQuery)) {
                pst.setInt(1, accountNumber);
                ResultSet rs = pst.executeQuery();

                if (rs.next()) {
                    // Nhập mã PIN
                    JPasswordField pf = new JPasswordField();
                    int result = JOptionPane.showConfirmDialog(null, pf, "Hãy nhập mã PIN", JOptionPane.OK_OPTION, JOptionPane.PLAIN_MESSAGE);
                    if (result == JOptionPane.OK_OPTION) {
                        int pinInput = Integer.parseInt(String.valueOf(pf.getPassword()));

                        if (pinInput != rs.getInt("user_pin")) {
                            JOptionPane.showMessageDialog(null, "Mã PIN không đúng!");
                            return false;
                        } else {
                            // Lấy số dư hiện tại
                            int currentBalance = rs.getInt(accountType.equals("Tài khoản chính") ? "sa_balance" : "ca_balance");
                            if (amount > currentBalance) {
                                JOptionPane.showMessageDialog(null, "Số dư tài khoản không đủ");
                                return false;
                            }

                            // Xử lý logic rút tiền
                            Map<Integer, Integer> usedDenominations = new HashMap<>();
                            int remainingAmount = amount;

                            // Lấy thông tin mệnh giá và số lượng từ database
                            String currencyQuery = "SELECT * FROM currency ORDER BY denomination DESC";
                            try (PreparedStatement currencyPst = conn.prepareStatement(currencyQuery);
                                 ResultSet currencyRs = currencyPst.executeQuery()) {
                                while (currencyRs.next() && remainingAmount > 0) {
                                    int denomination = currencyRs.getInt("denomination");
                                    int availableQuantity = currencyRs.getInt("quantity");

                                    int count = Math.min(remainingAmount / denomination, availableQuantity);
                                    if (count > 0) {
                                        usedDenominations.put(denomination, count);
                                        remainingAmount -= count * denomination;
                                    }
                                }
                            }

                            if (remainingAmount > 0) {
                                JOptionPane.showMessageDialog(null, "Không đủ tiền để rút với các mệnh giá hiện có.");
                                return false;
                            }

                            // Cập nhật số dư trong tài khoản
                            int newBalance = currentBalance - amount;
                            String updateBalanceQuery = "UPDATE open_account SET " + (accountType.equals("Tài khoản chính") ? "sa_balance" : "ca_balance") + " = ? WHERE account_number = ?";
                            try (PreparedStatement updatePst = conn.prepareStatement(updateBalanceQuery)) {
                                updatePst.setInt(1, newBalance);
                                updatePst.setInt(2, accountNumber);
                                updatePst.executeUpdate();
                            }

                            // Cập nhật số lượng tiền trong bảng `currency`
                            for (Map.Entry<Integer, Integer> entry : usedDenominations.entrySet()) {
                                String updateCurrencyQuery = "UPDATE currency SET quantity = quantity - ? WHERE denomination = ?";
                                try (PreparedStatement updateCurrencyPst = conn.prepareStatement(updateCurrencyQuery)) {
                                    updateCurrencyPst.setInt(1, entry.getValue());
                                    updateCurrencyPst.setInt(2, entry.getKey());
                                    updateCurrencyPst.executeUpdate();
                                }
                            }

                            // Ghi lịch sử giao dịch
                            String transactionQuery = "INSERT INTO bank_transaction (bank_transactiondate, bank_transactionaccountnumber, savings_account_amount, checking_account_amount, bank_transaction) VALUES (?, ?, ?, ?, ?)";
                            try (PreparedStatement transactionPst = conn.prepareStatement(transactionQuery)) {
                                transactionPst.setDate(1, new java.sql.Date(System.currentTimeMillis()));
                                transactionPst.setInt(2, accountNumber);
                                transactionPst.setDouble(3, accountType.equals("Tài khoản chính") ? amount : 0);
                                transactionPst.setDouble(4, accountType.equals("Tài khoản chính") ? 0 : amount);
                                transactionPst.setString(5, "Rút tiền");
                                transactionPst.executeUpdate();
                            }

                            // Hiển thị kết quả rút tiền
                            DecimalFormat decimal = new DecimalFormat("#,###");
                            lblAmount.setText(decimal.format(newBalance));
                            
                            StringBuilder breakdown = new StringBuilder("Rút tiền thành công từ " + accountType + "\n");

                            // Sắp xếp theo thứ tự giảm dần
                            usedDenominations.entrySet().stream()
                                .sorted((e1, e2) -> e2.getKey().compareTo(e1.getKey())) // Sắp xếp theo khóa giảm dần
                                .forEach(entry -> {
                                    breakdown.append("Mệnh giá ")
                                             .append(decimal.format(entry.getKey()))
                                             .append(" VNĐ: ")
                                             .append(entry.getValue())
                                             .append(" tờ\n");
                                });
                            JOptionPane.showMessageDialog(null, breakdown.toString());
                            return true;
                        }
                    }
                }
            }
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Lỗi: " + e.getMessage());
        e.printStackTrace();
    }
    return false;
}




    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txt_withdrawKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_withdrawKeyTyped

    }//GEN-LAST:event_txt_withdrawKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Withdraw.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Withdraw.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Withdraw.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Withdraw.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Withdraw().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmb_account;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel3;
    private com.toedter.calendar.JDateChooser jdc_date;
    public static javax.swing.JLabel lbl_accountnumber1;
    private javax.swing.JLabel lbl_amount;
    private javax.swing.JLabel lbl_createaccount;
    public static javax.swing.JLabel lbl_name1;
    private javax.swing.JTextField txt_withdraw;
    // End of variables declaration//GEN-END:variables
}
